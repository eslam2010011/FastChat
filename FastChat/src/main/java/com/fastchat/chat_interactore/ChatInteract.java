package com.fastchat.chat_interactore;import android.net.Uri;import android.webkit.MimeTypeMap;import androidx.annotation.NonNull;import com.fastchat.Model.Attachment;import com.fastchat.Model.BaseMessage;import com.fastchat.Model.Call;import com.fastchat.Model.FastChatConstants;import com.fastchat.Model.LinkMessage;import com.fastchat.Model.MediaMessage;import com.fastchat.Model.ReplyMessage;import com.fastchat.Model.TextMessage;import com.fastchat.Model.User;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.Query;import com.google.firebase.database.ValueEventListener;import java.io.File;import java.util.Calendar;public class ChatInteract implements ChatContractor {    public ChatInteract() {    }    @Override    public void sendMediaMessage(String GroupId,File file, String filetype, String receiverId, String userId, Chat.CallbackListener callbackListener) {        Uri selectedUri = Uri.fromFile(file);        String fileExtension = MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString());        String mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);        MediaMessage mediaMessage = new MediaMessage(receiverId, filetype, FastChatConstants.RECEIVER_TYPE_USER);        int file_size = Integer.parseInt(String.valueOf(file.length()));        mediaMessage.setCategory(FastChatConstants.CATEGORY_MESSAGE);        mediaMessage.setUserId(userId);        mediaMessage.setGroupId(GroupId);        Attachment attachment = new Attachment();        attachment.setFileMimeType(mimeType);        attachment.setFileExtension(fileExtension);        attachment.setFileUrl(null);        if (file.getName() != null) {            attachment.setFileName(file.getName());        } else {            attachment.setFileName("File without name");        }        attachment.setFileSize(file_size);        attachment.setFilePath(file.getPath());        mediaMessage.setAttachment(attachment);        new Chat().writeMessage(mediaMessage, callbackListener);       /* new Chat().writeMessage(mediaMessage, new Chat.CallbackListener() {            @Override            public void onSuccess(BaseMessage textMessage) {                MediaMessage m = ((MediaMessage) textMessage);                MediaUtils.playSendSound(FastChat.getContext(), R.raw.outgoing_message);            }        });*/    }    @Override    public void sendMessage(String GroupId,String message, String receiverId, String userId, Chat.CallbackListener callbackListener) {        TextMessage textMessage;        textMessage = new TextMessage(receiverId, FastChatConstants.RECEIVER_TYPE_USER, message);        textMessage.setUserId(userId);        textMessage.setGroupId(GroupId);         textMessage.setCategory(FastChatConstants.CATEGORY_MESSAGE);        new Chat().writeMessage(textMessage, callbackListener);    }    @Override    public void sendMessageLink(String GroupId, String message, String receiverId, String userId, Chat.CallbackListener callbackListener) {        LinkMessage textMessage;        textMessage = new LinkMessage(receiverId, FastChatConstants.RECEIVER_TYPE_USER, message);        textMessage.setUserId(userId);        textMessage.setGroupId(GroupId);        textMessage.setCategory(FastChatConstants.CATEGORY_MESSAGE);        new Chat().writeMessage(textMessage, callbackListener);    }    /*    main-data    |__messageThread  (all data about msgs)    |  |__threadId      (unique id for msg thread)    |     |__chatId     (unique id for chat msgs)    |        |__userId    |        |__userName    |        |__chatMessage    |        |__chatTimestamp    |    |__messageThreadMetadata    |  |__threadId    |     |__createdAt    |     |__createdByUserId    |     |__threadId    |     |__threadName    |     |__threadType (public/private)    |     |__lastChatId (id for last chat, use this to lookup in messageThread)    |    |__users    |  |__userId    |     |__userId    |     |__userName    |     |__activeThreads (list of ids of active threads used by user)    |    |__unseenMsgCountData    |  |__threadId    |     |__userId    |     |__unseenMsgCount     */    @Override    public void sendMessageCall(String GroupId,String callType, String receiverId, String userId, Chat.CallbackListener callbackListener) {        String SessionId = "C-" + Calendar.getInstance().getTime().getTime() + "-" + userId;        Call textMessage;        textMessage = new Call(receiverId, FastChatConstants.RECEIVER_TYPE_USER, callType);        textMessage.setUserId(userId);        textMessage.setGroupId(GroupId);        textMessage.setCallStatus(FastChatConstants.CALL_STATUS_INITIATED);        //textMessage.setSessionId(SessionId);        textMessage.setCategory(FastChatConstants.CATEGORY_CALL);        new Chat().writeMessage(textMessage, callbackListener);    }    @Override    public void sendReplyMessage(String GroupId,BaseMessage baseMessage, int position, String text, String receiverId, String userId, Chat.CallbackListener callbackListener) {        ReplyMessage textMessage;        textMessage = new ReplyMessage(receiverId, text, FastChatConstants.RECEIVER_TYPE_USER, baseMessage, position);        textMessage.setUserId(userId);        textMessage.setGroupId(GroupId);        textMessage.setCategory(FastChatConstants.CATEGORY_MESSAGE);        new Chat().writeMessage(textMessage, callbackListener);    }    @Override    public void changeCall(String userId, String receiverId, String sessionId, String CALL_STATUS, String time) {        new Chat().ChangeCall(userId, receiverId, sessionId, CALL_STATUS, time);    }    @Override    public void UpdateStatusMessage(String groupId,String userId, String receiverId, String messageId, String keyUpdate) {        new Chat().updateMessages(groupId,userId, receiverId, messageId, keyUpdate);    }    @Override    public Query GetMessage(int page, String userId, String receiverId) {        return new Chat().getMessages(page, userId, receiverId);    }    @Override    public Query GetConversation(int page, String userId) {        return new Chat().getConversation(page, userId);    }    @Override    public DatabaseReference CheckConversation(String userId, String receiverId) {        return new Chat().CheckConversation(userId,receiverId);    }    @Override    public void createUser(String userId, String name) {        User user = new User(name, userId, "", "");        new Chat().getUser(userId).addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                if (dataSnapshot.exists() && dataSnapshot.getChildrenCount() > 0) {                } else {                    new Chat().setUser(user, userId);                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    @Override    public void lastActive(String userId, boolean onlineNow) {        new Chat().lastActive(userId, "lastSeenAt", onlineNow);    }    @Override    public void fcmTokens(String userId, String fcmTokens) {        new Chat().fcmTokens(userId, fcmTokens);    }    @Override    public DatabaseReference getFcmToken(String userId) {        return new Chat().getFcmToken(userId);    }    @Override    public void createUser(User newUser) {        new Chat().setUser(newUser, newUser.getUserId());    }    @Override    public DatabaseReference getUser(String userId) {        return new Chat().getUser(userId);    }    @Override    public void addReaction(String groupId,String userId, String receiverId, String key, String KeyUpdate, String KeyEmoji, String feeling) {        new Chat().addReaction(groupId,userId, receiverId, key, KeyUpdate, KeyEmoji, feeling);    }    @Override    public void deleteReaction(String groupId,String userId, String receiverId, String key, String KeyUpdate, String KeyEmoji, String feeling) {        new Chat().deleteReaction(groupId,userId, receiverId, key, KeyUpdate, KeyEmoji, feeling);    }    @Override    public void addTyping(String userId, String receiverId, String key, String KeyUpdate, boolean Typing) {        new Chat().addTyping(userId, receiverId, key, KeyUpdate, Typing);    }    @Override    public DatabaseReference GetTyping(String userId, String receiverId) {        return new Chat().GetTyping(userId, receiverId);    }    public static String setOneToOneChat(String uid1, String uid2)    {        if(uid1.length() <uid2.length()){            return uid1+uid2;        }        else{            return uid2+uid1;        }    }}